// sample config file for blipp - designed to match unis service definition
// with blipp specific stuff under ["properties"]["configurations"]
// service schema http://unis.incntre.iu.edu/schema/20140214/service
// configuration schema is ###TODO
// This conf file schema deviates from the service schema only in that it
// may not require all fields that the schema does
{
    "status": "ON", // blipp check's for OFF... anything else is ON
    "id": 12345678990, // UNIS adds this
    "selfRef": "https://dev.incntre.iu.edu/services/a733g252367890", // blipp doesn't use this... unis adds it
    "accessPoint": "", // not relevant to blipp (yet?)
    "serviceType": "http://some_schema_domain/blipp", // required to post - blipp puts in automatically
    "name": "blipp", // blipp uses this to query unis if no service_id is provided
    "ttl": 1000, // no plans to implement a lifetime right now
    "ts": 2098340983223, // unis inserts this when the config gets sent to it
    "description": "blipp desc", // will be added by defaults if not specified
    "runningOn":{ // this get's passed on to the probe config
	"href":"http://dev.incntre.iu.edu/nodes/hikerbear",
	"rel":"full"
    },
    "properties": {
	"geni": {"slice_uuid": "someuuid387234deadbeef"}, // slice uuid used for geni auth
	"configurations": {
	    "unis_url":"http://dev.incntre.iu.edu",
	    "config_file": "/usr/local/etc/blippconfig.json",
	    "unis_poll_interval": 300, // reload config from unis every 300 seconds
	    "use_ssl": false, // JSON boolean value
	    "ssl_cert": "cert_file", // location of cert for auth
	    "ssl_key": "key_file", // location of key for auth
	    // if a string, blipp will attempt to verify the server cert against the CA file
	    // if set to None or "", blipp will not attempt to do verification
	    // if true, web browser style certificate verification is done (handled by python requests)
	    "ssl_cafile": "ca_file",
	    "probe_defaults": { // default config for each probe... will be overridden by
		                // anything specified within the probe specific config below
		"collection_schedule":"builtins.simple", // under schedules dir, look in file
		                                         // builtins for method "simple"
		"schedule_params":{"every": 10},         // keyword args passed to schedule method
		                                         // in this case, collect every 10 s
		"reporting_params": 10, // send data every 10 measurements collected
		"collection_size":10000000, // collection size (bytes) to be created in MS
		"collection_ttl":1500000, // collection ttl (seconds) for collection in MS
		"ms_url":"http://dev.incntre.iu.edu" // MS can be specified per probe
	    },
	    // blipp will look for ms_instance and auth_uuid in node.info
	    "gemini_node_info":"/usr/local/etc/node.info",
	    "probes":{ // the keys under probes are the filenames of probes without the ".py"
		       // their values are dictionaries which contain default config for all instances
		       // of that probe. The different instances are in a list of dictionaries
		       // under "targets". The config in each dictionary in the list adds to and
		       // overrides the default config for the probe, as well as the default config
		       // for the whole blipp instance.
		"ping1":{
		    "probe_module": "ping",
		    "collection_schedule":"builtins.random", // not implemented yet
		    "schedule_params":{"low": 10, "high": 60, "distribution": "poisson"},
		    // wait randomly between 10 and 60 seconds between collections, with a
                    // poisson distribution of wait values (not yet implemented)
		    "reporting_params":10,
		    "collection_size":3000000,
		    "collection_ttl":30000,
		    "address":"129.62.33.22",
		    "timeout":3,
		    "packet_size":56,
		    "byte_pattern":"0xAAAA"
		},
		"ping2":{
		    "probe_module": "ping",
		    "collection_schedule":"builtins.random", // not implemented yet
		    "schedule_params":{"low": 10, "high": 60, "distribution": "poisson"},
		    // wait randomly between 10 and 60 seconds between collections, with a
                    // poisson distribution of wait values (not yet implemented)
		    "reporting_params":10,
		    "collection_size":3000000,
		    "collection_ttl":1200000,
		    "address":"bing.com",
		    "timeout":2,
		    "packet_size":56,
		    "byte_pattern":"0xAAAA"
		},
		"cpu1":{
		    "probe_module": "cpu",
		    "collection_schedule":"simple",
		    "schedule_params": {"every": 1},
		},
		"net1":{
		    "probe_module": "net",
		    "status":"off", // not used yet
		},
		"ping3":{ // a more generic way to do ping... or anything else
		    "probe_module": "cmd_line_probe",
		    "command": "ping -c 1 $address", // some command to be executed
		    // a Python regex to extract data from the output of command
		    "regex": "ttl=(?P<ttl>\\d+).*time=(?P<rtt>\\d+\\.\\d+) ",
		    // map regex captures to event Types
		    "eventTypes": {"ttl": "ps:tools:blipp:linux:net:ping:ttl",
				   "rtt": "ps:tools:blipp:linux:net:ping:rtt"},
		    "address": "www.google.com"
		},
		"ping4": {
		    // another way to specify measurements - the
		    // schema at the url provided has default values
		    // including what probe_module to use, and other
		    // configuration options. Specifying any of them
		    // can override the default value
		    "$schema": "http://unis.incntre.iu.edu/schema/blippmeasurements/20130416/ping",
		    "address": "iu.edu"
		}
	    }
	}
    }
}
